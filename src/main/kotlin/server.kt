package se.cybercow.hellovertx

import io.vertx.core.AbstractVerticle
import io.vertx.core.Vertx
import io.vertx.ext.web.Router
import java.util.concurrent.CountDownLatch
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.module.kotlin.KotlinModule
import java.io.File


/**
 * Read version.json generated by Gradle.
 *
 * Will throw exception when file is not found. This should crash
 * the start of the program.
 */
class GradleConfig {
    data class Config(val version: String, val revision: String, val buildtime: String)

    fun build(): Config {
        val json = File(javaClass.classLoader.getResource("version.json").toURI())
            .readText(Charsets.UTF_8)
        val objectMapper = ObjectMapper().registerModule(KotlinModule())
        val config: Config = objectMapper.readValue(json, Config::class.java)
        return config
    }
}


class HelloNGServer : AbstractVerticle() {
    val gradleConfig = GradleConfig().build()

    @Throws(Exception::class)
    override fun start() {
        val router = Router.router(vertx)

        router.route().handler { routingContext ->
            routingContext
                .response()
                .putHeader("content-type", "text/html")
                .end("""Hello Engine!<br> 
Version: ${gradleConfig.version}<br>
Revision: ${gradleConfig.revision}<br>
Build time: ${gradleConfig.buildtime}""".trimMargin())
        }

        vertx.createHttpServer().requestHandler(router).listen(5000)
    }

    companion object {
        @JvmStatic
        fun main(args: Array<String>) {
            val vertx = Vertx.vertx()
            vertx.deployVerticle(HelloNGServer())

            CountDownLatch(1).await()
        }
    }
}