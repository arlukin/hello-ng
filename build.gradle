plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.40'
    // Building shadowjar/fatjar
    id 'com.github.johnrengelman.shadow' version '5.0.0'
    // https://mvnrepository.com/artifact/org.ajoberstar/grgit
    id "org.ajoberstar.grgit" version "1.7.2"

}

import java.text.SimpleDateFormat


group 'se.springville'
version = grgit.tag.list().collect() { it.name }.sort().reverse(true)[0]

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    // Used to read version.yml generated by gradle from kotlin
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.9"


    // Unit Test
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.4.2'

    // Vertx
    implementation 'io.vertx:vertx-core:3.7.1'
    implementation "io.vertx:vertx-web:3.7.1"
    implementation 'io.vertx:vertx-lang-kotlin:3.7.1'
}

//
// Compile, Unit test and build jar file
//
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

//
// Create config file that are loaded from kotlin program.
//
task generateResources(type: WriteProperties) {
    outputFile("${project.buildDir}/generated-resources/version.config")
    property("version", version)
    property("git_revision", grgit.head().id)
    property("buildtime", new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date()))
}

project.tasks.processResources.dependsOn project.tasks.generateResources
sourceSets.main.resources.srcDirs += [ "$buildDir/generated-resources" ]
sourceSets.test.resources.srcDirs += [ "$buildDir/generated-resources" ]

test {
    useJUnitPlatform {
        includeEngines "junit-jupiter"
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jar {
    archiveFileName = "hello-ng.jar"
    manifest {
        attributes 'Main-Class': 'se.cybercow.hellovertx.HelloNGServer'
    }

    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}


//
// Create ShadowJar/FatJar
//
shadowJar {
    // TODO minimize()
    archiveFileName = "hello-ng-shadow.jar"
}
project.tasks.build.dependsOn project.tasks.shadowJar


//
// Create K8s deployment file.
//
task localK8s(type: Copy) {
    from 'deployment.yml'
    into "$buildDir/"
    expand("REGISTRY": "localhost:9000", "VERSION": version)
}
project.tasks.localK8s.dependsOn project.tasks.build

task remoteK8s(type: Copy) {
    from 'deployment.yml'
    into "$buildDir/"
    expand("REGISTRY": "gcr.io", "VERSION": version)
}
project.tasks.remoteK8s.dependsOn project.tasks.build

